/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.meteoinfo.demo;

import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintException;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.UnsupportedLookAndFeelException;
import org.meteoinfo.data.GridData;
import org.meteoinfo.data.StationData;
import org.meteoinfo.geo.mapdata.MapDataManage;
import org.meteoinfo.geo.meteodata.DrawMeteoData;
import org.meteoinfo.data.GridDataSetting;
import org.meteoinfo.geo.analysis.InterpolationMethods;
import org.meteoinfo.geo.analysis.InterpolationSetting;
import org.meteoinfo.data.meteodata.MeteoDataInfo;
import org.meteoinfo.data.meteodata.StationModelData;
import org.meteoinfo.common.MIMath;
import org.meteoinfo.common.PointD;
import org.meteoinfo.geo.util.GeoMathUtil;
import org.meteoinfo.geometry.legend.*;
import org.meteoinfo.ui.event.ActiveMapFrameChangedEvent;
import org.meteoinfo.ui.event.IActiveMapFrameChangedListener;
import org.meteoinfo.ndarray.DataType;
import org.meteoinfo.geo.layer.LabelSet;
import org.meteoinfo.geo.layer.MapLayer;
import org.meteoinfo.geo.layer.RasterLayer;
import org.meteoinfo.geo.layer.VectorLayer;
import org.meteoinfo.geo.layout.LayoutGraphic;
import org.meteoinfo.geo.layout.LayoutLegend;
import org.meteoinfo.geo.layout.LayoutMap;
import org.meteoinfo.geo.layout.LegendStyles;
import org.meteoinfo.geo.layout.MouseMode;
import org.meteoinfo.geo.legend.LegendManage;
import org.meteoinfo.geo.legend.MapFrame;
import org.meteoinfo.geo.mapview.MaskOut;
import org.meteoinfo.geo.mapview.MouseTools;
import org.meteoinfo.projection.KnownCoordinateSystems;
import org.meteoinfo.projection.ProjectionInfo;
import org.meteoinfo.projection.ProjectionNames;
import org.meteoinfo.projection.Reproject;
import org.meteoinfo.geometry.shape.PointShape;
import org.meteoinfo.geometry.shape.ShapeTypes;

/**
 *
 * @author yaqiang
 */
public class FrmMain extends javax.swing.JFrame {

    private JButton _currentTool = null;
    private String startupPath;

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();

        startupPath = System.getProperty("user.dir");

        //this.mapView1.setBackground(Color.white);
        //this.mapView1.setDoubleBuffer(false);
        //this.mapLayout1.setDoubleBuffer(false);
        this.layersLegend1.getActiveMapFrame().setMapView(this.mapView1);
        this.layersLegend1.setMapLayout(this.mapLayout1);
        this.mapLayout1.setLockViewUpdate(true);

        this.layersLegend1.addActiveMapFrameChangedListener(new IActiveMapFrameChangedListener() {
            @Override
            public void activeMapFrameChangedEvent(ActiveMapFrameChangedEvent event) {
                mapView1 = layersLegend1.getActiveMapFrame().getMapView();
                setMapView();
                if (jTabbedPane1.getSelectedIndex() == 0) {
                    mapView1.paintLayers();
                }
            }
        });

        mapLayout1.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                layout_MouseMoved(e);
            }
        });

        //Set width and heigth
        this.setSize(1000, 650);

        //Load layers
        this.loadLayers();

        //Add south China sea map frame
        this.addMapFrame_ChinaSouthSea();

        //Add title
        this.addTitle();

        //Set initial tool
        this.jButton_Pan.doClick();

        this.setMapView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton_AddLayer = new javax.swing.JButton();
        jButton_Select = new javax.swing.JButton();
        jButton_ZoomIn = new javax.swing.JButton();
        jButton_ZoomOut = new javax.swing.JButton();
        jButton_Pan = new javax.swing.JButton();
        jButton_FullExtent = new javax.swing.JButton();
        jButton_Identifer = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel_Map = new javax.swing.JPanel();
        mapView1 = new org.meteoinfo.geo.mapview.MapView();
        jPanel_Layout = new javax.swing.JPanel();
        mapLayout1 = new org.meteoinfo.geo.layout.MapLayout();
        layersLegend1 = new org.meteoinfo.geo.legend.LayersLegend();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel_Status = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel_Coordinate = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_ExportFigure = new javax.swing.JMenuItem();
        jMenu_MeteoData = new javax.swing.JMenu();
        jMenu_GridData = new javax.swing.JMenu();
        jMenuItem_Contour = new javax.swing.JMenuItem();
        jMenuItem_Shaded = new javax.swing.JMenuItem();
        jMenuItem_GridFill = new javax.swing.JMenuItem();
        jMenuItem_GridPoint = new javax.swing.JMenuItem();
        jMenuItem_Raster = new javax.swing.JMenuItem();
        jMenuItem_Vector = new javax.swing.JMenuItem();
        jMenuItem_Barb = new javax.swing.JMenuItem();
        jMenuItem_Streamline = new javax.swing.JMenuItem();
        jMenu_StationData = new javax.swing.JMenu();
        jMenuItem_StationPoint = new javax.swing.JMenuItem();
        jMenuItem_StationModel = new javax.swing.JMenuItem();
        jMenuItem_WeatherSymbol = new javax.swing.JMenuItem();
        jMenuItem_StationVector = new javax.swing.JMenuItem();
        jMenuItem_StationShaded = new javax.swing.JMenuItem();
        jMenu_MICAPSData = new javax.swing.JMenu();
        jMenuItem_MICAPS13 = new javax.swing.JMenuItem();
        jMenu_Projection = new javax.swing.JMenu();
        jMenuItem_Lambert = new javax.swing.JMenuItem();
        jMenuItem_LongLat = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_ShowLongLat = new javax.swing.JMenuItem();
        jMenu_Map = new javax.swing.JMenu();
        jMenuItem_MaskOut = new javax.swing.JMenuItem();
        jMenuItem_CreatePointLayer = new javax.swing.JMenuItem();
        jMenuItem_Test = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton_AddLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add_Layer.png"))); // NOI18N
        jButton_AddLayer.setToolTipText("Add Layer");
        jButton_AddLayer.setFocusable(false);
        jButton_AddLayer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_AddLayer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_AddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddLayerActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_AddLayer);

        jButton_Select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow.png"))); // NOI18N
        jButton_Select.setToolTipText("Select");
        jButton_Select.setFocusable(false);
        jButton_Select.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_Select.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SelectActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_Select);

        jButton_ZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_ZoomIn.Image.png"))); // NOI18N
        jButton_ZoomIn.setToolTipText("Zoom In");
        jButton_ZoomIn.setFocusable(false);
        jButton_ZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_ZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_ZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ZoomInActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_ZoomIn);

        jButton_ZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_ZoomOut.Image.png"))); // NOI18N
        jButton_ZoomOut.setToolTipText("Zoom Out");
        jButton_ZoomOut.setFocusable(false);
        jButton_ZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_ZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_ZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ZoomOutActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_ZoomOut);

        jButton_Pan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_Pan.Image.png"))); // NOI18N
        jButton_Pan.setToolTipText("Pan");
        jButton_Pan.setFocusable(false);
        jButton_Pan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_Pan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_Pan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PanActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_Pan);

        jButton_FullExtent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TSB_FullExent.Image.png"))); // NOI18N
        jButton_FullExtent.setToolTipText("Full Extent");
        jButton_FullExtent.setFocusable(false);
        jButton_FullExtent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_FullExtent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_FullExtent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FullExtentActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_FullExtent);

        jButton_Identifer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information.png"))); // NOI18N
        jButton_Identifer.setToolTipText("Identifer");
        jButton_Identifer.setFocusable(false);
        jButton_Identifer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_Identifer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_Identifer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_IdentiferActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton_Identifer);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(200, 102));

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout mapView1Layout = new javax.swing.GroupLayout(mapView1);
        mapView1.setLayout(mapView1Layout);
        mapView1Layout.setHorizontalGroup(
            mapView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );
        mapView1Layout.setVerticalGroup(
            mapView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel_MapLayout = new javax.swing.GroupLayout(jPanel_Map);
        jPanel_Map.setLayout(jPanel_MapLayout);
        jPanel_MapLayout.setHorizontalGroup(
            jPanel_MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel_MapLayout.setVerticalGroup(
            jPanel_MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Map", jPanel_Map);

        javax.swing.GroupLayout jPanel_LayoutLayout = new javax.swing.GroupLayout(jPanel_Layout);
        jPanel_Layout.setLayout(jPanel_LayoutLayout);
        jPanel_LayoutLayout.setHorizontalGroup(
            jPanel_LayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapLayout1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel_LayoutLayout.setVerticalGroup(
            jPanel_LayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapLayout1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Layout", jPanel_Layout);

        jSplitPane1.setRightComponent(jTabbedPane1);
        jSplitPane1.setLeftComponent(layersLegend1);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setMaximumSize(new java.awt.Dimension(56, 20));

        jLabel_Status.setText("...");
        jToolBar2.add(jLabel_Status);
        jToolBar2.add(jSeparator2);

        jLabel_Coordinate.setText("...");
        jToolBar2.add(jLabel_Coordinate);

        jMenu1.setText("File");

        jMenuItem_ExportFigure.setText("Export Figure");
        jMenuItem_ExportFigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ExportFigureActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_ExportFigure);

        jMenuBar1.add(jMenu1);

        jMenu_MeteoData.setText("MeteoData");

        jMenu_GridData.setText("Grid Data");

        jMenuItem_Contour.setText("Contour");
        jMenuItem_Contour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ContourActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Contour);

        jMenuItem_Shaded.setText("Shaded");
        jMenuItem_Shaded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ShadedActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Shaded);

        jMenuItem_GridFill.setText("Grid_Fill");
        jMenuItem_GridFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_GridFillActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_GridFill);

        jMenuItem_GridPoint.setText("Grid_Point");
        jMenuItem_GridPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_GridPointActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_GridPoint);

        jMenuItem_Raster.setText("Raster");
        jMenuItem_Raster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_RasterActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Raster);

        jMenuItem_Vector.setText("Vector");
        jMenuItem_Vector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_VectorActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Vector);

        jMenuItem_Barb.setText("Barb");
        jMenuItem_Barb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_BarbActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Barb);

        jMenuItem_Streamline.setText("Streamline");
        jMenuItem_Streamline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StreamlineActionPerformed(evt);
            }
        });
        jMenu_GridData.add(jMenuItem_Streamline);

        jMenu_MeteoData.add(jMenu_GridData);

        jMenu_StationData.setText("Station Data");

        jMenuItem_StationPoint.setText("Station Point");
        jMenuItem_StationPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StationPointActionPerformed(evt);
            }
        });
        jMenu_StationData.add(jMenuItem_StationPoint);

        jMenuItem_StationModel.setText("Station Model");
        jMenuItem_StationModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StationModelActionPerformed(evt);
            }
        });
        jMenu_StationData.add(jMenuItem_StationModel);

        jMenuItem_WeatherSymbol.setText("Weather Symbol");
        jMenuItem_WeatherSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_WeatherSymbolActionPerformed(evt);
            }
        });
        jMenu_StationData.add(jMenuItem_WeatherSymbol);

        jMenuItem_StationVector.setText("Vector");
        jMenuItem_StationVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StationVectorActionPerformed(evt);
            }
        });
        jMenu_StationData.add(jMenuItem_StationVector);

        jMenuItem_StationShaded.setText("Shaded");
        jMenuItem_StationShaded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StationShadedActionPerformed(evt);
            }
        });
        jMenu_StationData.add(jMenuItem_StationShaded);

        jMenu_MeteoData.add(jMenu_StationData);

        jMenu_MICAPSData.setText("MICAPS Data");

        jMenuItem_MICAPS13.setText("MICAPS 13 Cloud");
        jMenuItem_MICAPS13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_MICAPS13ActionPerformed(evt);
            }
        });
        jMenu_MICAPSData.add(jMenuItem_MICAPS13);

        jMenu_MeteoData.add(jMenu_MICAPSData);

        jMenuBar1.add(jMenu_MeteoData);

        jMenu_Projection.setText("Projection");

        jMenuItem_Lambert.setText("Lambert Conformal");
        jMenuItem_Lambert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_LambertActionPerformed(evt);
            }
        });
        jMenu_Projection.add(jMenuItem_Lambert);

        jMenuItem_LongLat.setText("LongLat");
        jMenuItem_LongLat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_LongLatActionPerformed(evt);
            }
        });
        jMenu_Projection.add(jMenuItem_LongLat);
        jMenu_Projection.add(jSeparator1);

        jMenuItem_ShowLongLat.setText("Show Long/Lat");
        jMenuItem_ShowLongLat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ShowLongLatActionPerformed(evt);
            }
        });
        jMenu_Projection.add(jMenuItem_ShowLongLat);

        jMenuBar1.add(jMenu_Projection);

        jMenu_Map.setText("Map");

        jMenuItem_MaskOut.setText("Mask Out");
        jMenuItem_MaskOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_MaskOutActionPerformed(evt);
            }
        });
        jMenu_Map.add(jMenuItem_MaskOut);

        jMenuItem_CreatePointLayer.setText("Create Point Layer");
        jMenuItem_CreatePointLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CreatePointLayerActionPerformed(evt);
            }
        });
        jMenu_Map.add(jMenuItem_CreatePointLayer);

        jMenuItem_Test.setText("Test");
        jMenuItem_Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_TestActionPerformed(evt);
            }
        });
        jMenu_Map.add(jMenuItem_Test);

        jMenuBar1.add(jMenu_Map);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadLayers() {
        try {
            this.layersLegend1.getActiveMapFrame().getMapView().setLockViewUpdate(true);

            //Load country layer
            String mapDir = this.startupPath + "/data/map/";
            String fileName = mapDir + "country1.shp";
            MapLayer aLayer = MapDataManage.loadLayer(fileName);
            PolygonBreak polyBreak = (PolygonBreak) aLayer.getLegendScheme().getLegendBreaks().get(0);
            polyBreak.setDrawFill(false);
            polyBreak.setOutlineColor(Color.black);
            this.layersLegend1.getActiveMapFrame().addLayer(aLayer);

            //Load China layer
            fileName = mapDir + "china.shp";
            aLayer = MapDataManage.loadLayer(fileName);
            aLayer.setVisible(false);
            this.layersLegend1.getActiveMapFrame().addLayer(aLayer);

            //Load river layer
            fileName = mapDir + "rivers.shp";
            aLayer = MapDataManage.loadLayer(fileName);
            PolylineBreak lineBreak = (PolylineBreak) aLayer.getLegendScheme().getLegendBreaks().get(0);
            lineBreak.setColor(Color.cyan);
            lineBreak.setWidth(1);
            this.layersLegend1.getActiveMapFrame().addLayer(aLayer);

            //Load city layer
            fileName = mapDir + "res1_4m.shp";
            aLayer = MapDataManage.loadLayer(fileName);
            PointBreak pointBreak = (PointBreak) aLayer.getLegendScheme().getLegendBreaks().get(0);
            pointBreak.setColor(Color.red);
            aLayer.setExpanded(true);
            //Label city name
            VectorLayer cityLayer = (VectorLayer) aLayer;
            LabelSet labelSet = cityLayer.getLabelSet();
            labelSet.setFieldName("NAME");
            labelSet.setAvoidCollision(true);
            labelSet.setLabelAlignType(AlignType.CENTER);
            labelSet.setYOffset(0);
            Font font = new Font("楷体", Font.PLAIN, 16);
            labelSet.setLabelFont(font);
            labelSet.setLabelColor(Color.red);
            labelSet.setDrawShadow(false);
            labelSet.setColorByLegend(false);
            cityLayer.addLabels();
            this.layersLegend1.getActiveMapFrame().addLayer(aLayer);

            //Set layout map size
            LayoutMap layoutMap = this.mapLayout1.getActiveLayoutMap();
            layoutMap.setLeft(40);
            layoutMap.setTop(40);
            layoutMap.setWidth(600);
            layoutMap.setHeight(400);

            //Repaint
            this.layersLegend1.getActiveMapFrame().getMapView().setLockViewUpdate(false);
            this.layersLegend1.getActiveMapFrame().getMapView().zoomToExtent(70, 140, 10, 60);
            this.layersLegend1.repaint();
        } catch (IOException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addMapFrame_ChinaSouthSea() {
        try {
            //Add an empty map frame
            MapFrame mf = new MapFrame();
            mf.setText("China South Sea");
            this.layersLegend1.addMapFrame(mf);

            //Add a layer to this map frame
            String mapDir = "D:\\Temp\\Map\\";
            String fileName = mapDir + "country1.shp";

            MapLayer aLayer = MapDataManage.loadLayer(fileName);
            PolygonBreak polyBreak = (PolygonBreak) aLayer.getLegendScheme().getLegendBreaks().get(0);
            polyBreak.setDrawFill(false);
            polyBreak.setOutlineColor(Color.black);
            mf.addLayer(aLayer);

            //Set layout map property
            LayoutMap lm = this.mapLayout1.getLayoutMaps().get(1);
            lm.setDrawGridLabel(false);
            lm.setLeft(550);
            lm.setTop(330);
            lm.setWidth(80);
            lm.setHeight(100);
            mf.getMapView().zoomToExtent(105, 120, 0, 20);

            this.layersLegend1.repaint();
        } catch (IOException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addTitle() {
        this.mapLayout1.addText("MeteoInfo Class Library Demo", mapLayout1.getWidth() / 2, 20, 16);
    }

    private void setMapView() {
        //Add map view 
        this.mapView1.setLockViewUpdate(true);
        this.jPanel_Map.removeAll();
        javax.swing.GroupLayout jPanel_MapLayout = new javax.swing.GroupLayout(jPanel_Map);
        jPanel_Map.setLayout(jPanel_MapLayout);
        jPanel_MapLayout.setHorizontalGroup(
                jPanel_MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mapView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanel_MapLayout.setVerticalGroup(
                jPanel_MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mapView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        this.mapView1.setLockViewUpdate(false);
        if (_currentTool != null) {
            _currentTool.doClick();
        }

        mapView1.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                mapView_MouseMoved(e);
            }
        });

        this.mapView1.setFocusable(true);
        this.mapView1.requestFocusInWindow();
    }

    private void mapView_MouseMoved(MouseEvent e) {
        double pXY[] = this.layersLegend1.getActiveMapFrame().getMapView().screenToProj((double) e.getX(), (double) e.getY());
        double projX = pXY[0];
        double projY = pXY[1];
        if (layersLegend1.getActiveMapFrame().getMapView().getProjection().isLonLatMap()) {
            this.jLabel_Coordinate.setText("Lon: " + String.format("%1$.2f", projX) + "; Lat: " + String.format("%1$.2f", projY));
        } else {
            this.jLabel_Coordinate.setText("X: " + String.format("%1$.1f", projX) + "; Y: " + String.format("%1$.1f", projY));
            String theText = this.jLabel_Coordinate.getText();
            if (layersLegend1.getActiveMapFrame().getMapView().getProjection().getProjInfo().getProjectionName() == ProjectionNames.Robinson) {
                return;
            }

            ProjectionInfo toProj = KnownCoordinateSystems.geographic.world.WGS1984;
            ProjectionInfo fromProj = layersLegend1.getActiveMapFrame().getMapView().getProjection().getProjInfo();
            double[][] points = new double[1][];
            points[0] = new double[]{projX, projY};
            //double[] Z = new double[1];
            try {
                Reproject.reprojectPoints(points, fromProj, toProj, 0, 1);
                this.jLabel_Coordinate.setText(theText + " (Lon: " + String.format("%1$.2f", points[0][0]) + "; Lat: "
                        + String.format("%1$.2f", points[0][1]) + ")");
            } catch (Exception ex) {
                //this.TSSL_Coord.Text = "X: " + ProjX.ToString("0.0") + "; Y: " + ProjY.ToString("0.0"); 
            }
        }
    }

    private void layout_MouseMoved(MouseEvent e) {
        Point pageP = layersLegend1.getMapLayout().screenToPage(e.getX(), e.getY());
        for (MapFrame mf : layersLegend1.getMapFrames()) {
            Rectangle rect = mf.getLayoutBounds();
            if (MIMath.pointInRectangle(pageP, rect)) {
                double pXY[] = mf.getMapView().screenToProj((double) (pageP.x - rect.x), (double) (pageP.y - rect.y), layersLegend1.getMapLayout().getZoom());
                double projX = pXY[0];
                double projY = pXY[1];
                if (mf.getMapView().getProjection().isLonLatMap()) {
                    this.jLabel_Coordinate.setText("Lon: " + String.format("%1$.2f", projX) + "; Lat: " + String.format("%1$.2f", projY));
                } else {
                    this.jLabel_Coordinate.setText("X: " + String.format("%1$.1f", projX) + "; Y: " + String.format("%1$.1f", projY));
                    String theText = this.jLabel_Coordinate.getText();
                    if (mf.getMapView().getProjection().getProjInfo().getProjectionName() == ProjectionNames.Robinson) {
                        return;
                    }

                    ProjectionInfo toProj = KnownCoordinateSystems.geographic.world.WGS1984;
                    ProjectionInfo fromProj = mf.getMapView().getProjection().getProjInfo();
                    double[][] points = new double[1][];
                    points[0] = new double[]{projX, projY};
                    try {
                        Reproject.reprojectPoints(points, fromProj, toProj, 0, 1);
                        this.jLabel_Coordinate.setText(theText + " (Lon: " + String.format("%1$.2f", points[0][0]) + "; Lat: "
                                + String.format("%1$.2f", points[0][1]) + ")");
                    } catch (Exception ex) {
                        //this.TSSL_Coord.Text = "X: " + ProjX.ToString("0.0") + "; Y: " + ProjY.ToString("0.0"); 
                    }
                }

                break;
            }
        }
    }

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        int selIndex = this.jTabbedPane1.getSelectedIndex();
        switch (selIndex) {
            case 0:    //MapView
                this.mapLayout1.setLockViewUpdate(true);
                this.mapView1.zoomToExtent(this.mapView1.getViewExtent());
                break;
            case 1:    //MapLayout
                this.mapLayout1.setLockViewUpdate(false);
                this.mapLayout1.paintGraphics();
                break;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton_AddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddLayerActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        String[] fileExts = new String[]{"shp", "bmp", "gif", "jpg", "png"};
        GenericFileFilter mapFileFilter = new GenericFileFilter(fileExts, "Supported Formats");
        aDlg.setFileFilter(mapFileFilter);
        fileExts = new String[]{"shp"};
        mapFileFilter = new GenericFileFilter(fileExts, "Shape File (*.shp)");
        aDlg.addChoosableFileFilter(mapFileFilter);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            System.setProperty("user.dir", aFile.getParent());
            MapLayer aLayer = null;
            try {
                //aLayer = ShapeFileManage.loadShapeFile(aFile.getAbsolutePath());
                aLayer = MapDataManage.loadLayer(aFile.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (aLayer != null) {
                this.layersLegend1.getActiveMapFrame().addLayer(aLayer);
            }
        }
    }//GEN-LAST:event_jButton_AddLayerActionPerformed

    private void setCurrentTool(JButton currentTool) {
        if (!(_currentTool == null)) {
            _currentTool.setSelected(false);
        }
        _currentTool = currentTool;
        _currentTool.setSelected(true);
        jLabel_Status.setText(_currentTool.getToolTipText());
    }

    private void jButton_SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SelectActionPerformed
        // TODO add your handling code here:
        this.mapView1.setMouseTool(MouseTools.SELECT_ELEMENTS);
        this.layersLegend1.getMapLayout().setMouseMode(MouseMode.SELECT);

        setCurrentTool((JButton) evt.getSource());
    }//GEN-LAST:event_jButton_SelectActionPerformed

    private void jButton_ZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ZoomInActionPerformed
        // TODO add your handling code here:
        this.mapView1.setMouseTool(MouseTools.ZOOM_IN);
        this.layersLegend1.getMapLayout().setMouseMode(MouseMode.MAP_ZOOM_IN);

        setCurrentTool((JButton) evt.getSource());
    }//GEN-LAST:event_jButton_ZoomInActionPerformed

    private void jButton_ZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ZoomOutActionPerformed
        // TODO add your handling code here:
        this.mapView1.setMouseTool(MouseTools.ZOOM_OUT);
        this.layersLegend1.getMapLayout().setMouseMode(MouseMode.MAP_ZOOM_OUT);

        setCurrentTool((JButton) evt.getSource());
    }//GEN-LAST:event_jButton_ZoomOutActionPerformed

    private void jButton_PanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PanActionPerformed
        // TODO add your handling code here:
        this.mapView1.setMouseTool(MouseTools.PAN);
        this.layersLegend1.getMapLayout().setMouseMode(MouseMode.MAP_PAN);

        setCurrentTool((JButton) evt.getSource());
    }//GEN-LAST:event_jButton_PanActionPerformed

    private void jButton_FullExtentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FullExtentActionPerformed
        // TODO add your handling code here:
        this.mapView1.zoomToExtent(this.mapView1.getExtent());
    }//GEN-LAST:event_jButton_FullExtentActionPerformed

    private void jButton_IdentiferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_IdentiferActionPerformed
        // TODO add your handling code here:
        this.mapView1.setMouseTool(MouseTools.IDENTIFIER);
        this.layersLegend1.getMapLayout().setMouseMode(MouseMode.MAP_IDENTIFIER);

        setCurrentTool((JButton) evt.getSource());
    }//GEN-LAST:event_jButton_IdentiferActionPerformed

    private void jMenuItem_ExportFigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ExportFigureActionPerformed
        // TODO add your handling code here:
        JFileChooser aDlg = new JFileChooser();
        String[] fileExts = new String[]{"png"};
        GenericFileFilter mapFileFilter = new GenericFileFilter(fileExts, "Png Image (*.png)");
        aDlg.setFileFilter(mapFileFilter);
        fileExts = new String[]{"gif"};
        mapFileFilter = new GenericFileFilter(fileExts, "Gif Image (*.gif)");
        aDlg.addChoosableFileFilter(mapFileFilter);
        fileExts = new String[]{"jpg"};
        mapFileFilter = new GenericFileFilter(fileExts, "Jpeg Image (*.jpg)");
        aDlg.addChoosableFileFilter(mapFileFilter);
        aDlg.setAcceptAllFileFilterUsed(false);
        if (JFileChooser.APPROVE_OPTION == aDlg.showSaveDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            System.setProperty("user.dir", aFile.getParent());
            String extent = ((GenericFileFilter) aDlg.getFileFilter()).getFileExtent();
            String fileName = aFile.getAbsolutePath();
            if (!fileName.substring(fileName.length() - extent.length()).equals(extent)) {
                fileName = fileName + "." + extent;
            }

            if (this.jTabbedPane1.getSelectedIndex() == 0) {
                try {
                    this.layersLegend1.getActiveMapFrame().getMapView().exportToPicture(fileName);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PrintException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (this.jTabbedPane1.getSelectedIndex() == 1) {
                try {
                    this.layersLegend1.getMapLayout().exportToPicture(fileName);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PrintException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jMenuItem_ExportFigureActionPerformed

    private void jMenuItem_ContourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ContourActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        GridData press = aDataInfo.getGridData("PS");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(press,
                LegendType.UNIQUE_VALUE, ShapeTypes.POLYLINE);

        //Create a contour layer
        VectorLayer layer = DrawMeteoData.createContourLayer(press, aLS, "Contour_PS", "PS", true);
        LabelSet labelSet = layer.getLabelSet();
        labelSet.setLabelFont(new Font("Arial", Font.PLAIN, 14));
        layer.addLabels();

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(layer);
        layersLegend1.getActiveMapFrame().moveLayer(layer.getHandle(), 2);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Contour Layer");

        //Add a legend in layout
        LayoutLegend aLegend = mapLayout1.addLegend(650, 100);
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(layer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_ContourActionPerformed

    private void jMenuItem_ShadedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ShadedActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        GridData press = aDataInfo.getGridData("PS");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(press,
                LegendType.GRADUATED_COLOR, ShapeTypes.POLYGON);

        //Create a shaded layer
        VectorLayer aLayer = DrawMeteoData.createShadedLayer(press, aLS, "Shaded_PS", "PS", true);
        aLayer.setMaskout(true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 0);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Shaded Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (this.mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_ShadedActionPerformed

    private void jMenuItem_GridFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_GridFillActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        GridData press = aDataInfo.getGridData("PS");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(press,
                LegendType.GRADUATED_COLOR, ShapeTypes.POLYGON);

        //Create a shaded layer
        VectorLayer aLayer = DrawMeteoData.createGridFillLayer(press, aLS, "GridFill_PS", "PS");

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 0);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Grid Fill Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (this.mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_GridFillActionPerformed

    private void jMenuItem_GridPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_GridPointActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        GridData press = aDataInfo.getGridData("PS");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(press,
                LegendType.GRADUATED_COLOR, ShapeTypes.POINT);

        //Create a shaded layer
        VectorLayer aLayer = DrawMeteoData.createGridPointLayer(press, aLS, "GridPoint_PS", "PS");

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 2);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Grid Point Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (this.mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_GridPointActionPerformed

    private void jMenuItem_RasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_RasterActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        GridData press = aDataInfo.getGridData("PS");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(press,
                LegendType.GRADUATED_COLOR, ShapeTypes.POLYGON);

        //Create a shaded layer
        RasterLayer aLayer = DrawMeteoData.createRasterLayer(press, "GridFill_PS", aLS);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 0);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Raster Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (this.mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_RasterActionPerformed

    private void jMenuItem_VectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_VectorActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        aDataInfo.setTimeIndex(2);
        aDataInfo.setLevelIndex(3);
        GridData tData = aDataInfo.getGridData("T");
        GridData uData = aDataInfo.getGridData("U");
        GridData vData = aDataInfo.getGridData("V");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(tData,
                LegendType.GRADUATED_COLOR, ShapeTypes.POINT);

        //Create a contour layer
        VectorLayer aLayer = DrawMeteoData.createGridVectorLayer(uData, vData, tData, aLS, true, "Vector_UV", true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 2);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Wind Vector Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        mapLayout1.paintGraphics();
    }//GEN-LAST:event_jMenuItem_VectorActionPerformed

    private void jMenuItem_BarbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_BarbActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        aDataInfo.setTimeIndex(2);
        aDataInfo.setLevelIndex(3);
        GridData uData = aDataInfo.getGridData("U");
        GridData vData = aDataInfo.getGridData("V");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POINT, Color.blue, 10);

        //Create a barb layer
        VectorLayer aLayer = DrawMeteoData.createGridBarbLayer(uData, vData, uData, aLS, false, "Barb_UV", true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 2);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Wind Barb Layer");
    }//GEN-LAST:event_jMenuItem_BarbActionPerformed

    private void jMenuItem_StreamlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StreamlineActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "model.ctl";
        aDataInfo.openGrADSData(fileName);

        //Get GridData
        aDataInfo.setTimeIndex(2);
        aDataInfo.setLevelIndex(3);
        GridData uData = aDataInfo.getGridData("U");
        GridData vData = aDataInfo.getGridData("V");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POLYLINE, Color.blue, 1);
        aLS.setLegendBreak(0, new StreamlineBreak((PolylineBreak) aLS.getLegendBreak(0)));

        //Create a contour layer
        VectorLayer aLayer = DrawMeteoData.createStreamlineLayer(uData, vData, 4, aLS, "Streamline_UV", true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer.getHandle(), 2);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Wind streamline Layer");
    }//GEN-LAST:event_jMenuItem_StreamlineActionPerformed

    private void jMenuItem_StationPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StationPointActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open SYNOP data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "10101414.000";
        aDataInfo.openMICAPSData(fileName);

        //Get StationData
        StationData visData = aDataInfo.getStationData("Visibility");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromStationData(visData, LegendType.GRADUATED_COLOR,
                ShapeTypes.POINT);
        for (int i = 0; i < aLS.getBreakNum(); i++) {
            ((PointBreak) aLS.getLegendBreaks().get(i)).setSize(8);
        }

        //Create a station point layer
        VectorLayer aLayer = DrawMeteoData.createSTPointLayer(visData, aLS, "StationPoint_Vis", "Vis");

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Station Point Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        if (this.jTabbedPane1.getSelectedIndex() == 1) {
            mapLayout1.paintGraphics();
        }
    }//GEN-LAST:event_jMenuItem_StationPointActionPerformed

    private void jMenuItem_StationModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StationModelActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open SYNOP data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "10101414.000";
        aDataInfo.openMICAPSData(fileName);

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POINT, Color.blue, 12);

        //Get station model data
        StationModelData stationModelData = aDataInfo.getStationModelData();

        VectorLayer aLayer = DrawMeteoData.createStationModelLayer(stationModelData,
                aLS, "StationModel", true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Station Model Layer");
    }//GEN-LAST:event_jMenuItem_StationModelActionPerformed

    private void jMenuItem_WeatherSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_WeatherSymbolActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open SYNOP data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "10101414.000";
        aDataInfo.openMICAPSData(fileName);

        //Get StationData
        StationData wData = aDataInfo.getStationData("WeatherNow");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POINT, Color.blue, 15);

        //Create a contour layer
        VectorLayer aLayer = DrawMeteoData.createWeatherSymbolLayer(wData, "All Weather", "Weather");

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Weather Symbol Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        if (this.jTabbedPane1.getSelectedIndex() == 1) {
            mapLayout1.paintGraphics();
        }
    }//GEN-LAST:event_jMenuItem_WeatherSymbolActionPerformed

    private void jMenuItem_StationVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StationVectorActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open SYNOP data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "10101414.000";
        aDataInfo.openMICAPSData(fileName);

        //Get StationData
        StationData wdData = aDataInfo.getStationData("WindDirection");
        StationData wsData = aDataInfo.getStationData("WindSpeed");

        //Create a legend scheme
        LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POINT, Color.blue, 15);

        //Create a contour layer
        VectorLayer aLayer = DrawMeteoData.createSTVectorLayer(wdData, wsData, aLS, "StationVector", false);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Station Wind Vector Layer");
    }//GEN-LAST:event_jMenuItem_StationVectorActionPerformed

    private void jMenuItem_StationShadedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StationShadedActionPerformed
        // TODO add your handling code here:
        //Read data info
        MeteoDataInfo aDataInfo = new MeteoDataInfo();
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "10101414.000";
        aDataInfo.openMICAPSData(fileName);

        //Get station data
        StationData stationData = aDataInfo.getStationData("Precipitation6h");

        //Interpolate
        GridDataSetting aGDP = new GridDataSetting();
        aGDP.dataExtent.minX = 60;
        aGDP.dataExtent.maxX = 140;
        aGDP.dataExtent.minY = -20;
        aGDP.dataExtent.maxY = 60;
        aGDP.xNum = 80;
        aGDP.yNum = 80;
        InterpolationSetting gridInterp = new InterpolationSetting();
        gridInterp.setGridDataSetting(aGDP);

        gridInterp.setInterpolationMethod(InterpolationMethods.IDW_RADIUS);
        gridInterp.setRadius(2);
        gridInterp.setMinPointNum(1);

        GridData gridData = GeoMathUtil.interpolateData(stationData, gridInterp);

        //Create legend scheme
        LegendScheme aLS = LegendManage.createLegendSchemeFromGridData(gridData, LegendType.GRADUATED_COLOR,
                ShapeTypes.POLYGON);
        ((PolygonBreak) aLS.getLegendBreaks().get(0)).setDrawFill(false);

        //Create layer
        VectorLayer aLayer = DrawMeteoData.createShadedLayer(gridData, aLS, "Rain", "Rain", true);
        aLayer.setMaskout(true);

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer, 0);
        layersLegend1.repaint();

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - Station Shaded Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        if (this.jTabbedPane1.getSelectedIndex() == 1) {
            mapLayout1.paintGraphics();
        }
    }//GEN-LAST:event_jMenuItem_StationShadedActionPerformed

    private void jMenuItem_LambertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_LambertActionPerformed
        // TODO add your handling code here:
        String projStr = "+proj=lcc"
                + "+lat_1=30"
                + "+lat_2=60"
                + "+lat_0=0"
                + "+lon_0=110"
                + "+x_0=0"
                + "+y_0=0";
        ProjectionInfo aProjInfo = ProjectionInfo.factory(projStr);

        layersLegend1.getActiveMapFrame().getMapView().projectLayers(aProjInfo);
    }//GEN-LAST:event_jMenuItem_LambertActionPerformed

    private void jMenuItem_LongLatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_LongLatActionPerformed
        // TODO add your handling code here:
        ProjectionInfo aProjInfo = KnownCoordinateSystems.geographic.world.WGS1984;
        layersLegend1.getActiveMapFrame().getMapView().projectLayers(aProjInfo);
    }//GEN-LAST:event_jMenuItem_LongLatActionPerformed

    private void jMenuItem_ShowLongLatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ShowLongLatActionPerformed
        // TODO add your handling code here:
        this.jMenuItem_ShowLongLat.setSelected(!this.jMenuItem_ShowLongLat.isSelected());
        layersLegend1.getActiveMapFrame().getMapView().setDrawGridLine(this.jMenuItem_ShowLongLat.isSelected());
        layersLegend1.getActiveMapFrame().getMapView().paintLayers();
    }//GEN-LAST:event_jMenuItem_ShowLongLatActionPerformed

    private void jMenuItem_MaskOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_MaskOutActionPerformed
        // TODO add your handling code here:
        MaskOut mo = layersLegend1.getActiveMapFrame().getMapView().getMaskOut();
        mo.setMask(true);
        mo.setMaskLayer("china.shp");
        layersLegend1.getActiveMapFrame().getMapView().paintLayers();
    }//GEN-LAST:event_jMenuItem_MaskOutActionPerformed

    private void jMenuItem_CreatePointLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CreatePointLayerActionPerformed
        // TODO add your handling code here:
        //New layer
        VectorLayer aLayer = new VectorLayer(ShapeTypes.POINT);
        aLayer.setLayerName("New_Point_Layer");
        aLayer.setLegendScheme(LegendManage.createSingleSymbolLegendScheme(ShapeTypes.POINT, Color.black, 10));
        aLayer.setVisible(true);

        //Add fields            
        aLayer.editAddField("STATION", DataType.STRING);
        aLayer.editAddField("LON", DataType.DOUBLE);
        aLayer.editAddField("LAT", DataType.DOUBLE);
        aLayer.editAddField("DATA", DataType.DOUBLE);

        //Prepare coordinate data
        double[] X = {120.0, 110.0};
        double[] Y = {42.0, 35.0};
        double[] data = {100.0, 80.0};

        //Add shape
        for (int i = 0; i < 2; i++) {
            PointShape aPS = new PointShape();
            PointD aPoint = new PointD();
            aPoint.X = X[i];
            aPoint.Y = Y[i];
            aPS.setPoint(aPoint);
            int shapeNum = aLayer.getShapeNum();
            try {
                if (aLayer.editInsertShape(aPS, shapeNum)) {
                    //Edit record value
                    aLayer.editCellValue("STATION", shapeNum, "St1");
                    aLayer.editCellValue("LON", shapeNum, aPoint.X);
                    aLayer.editCellValue("LAT", shapeNum, aPoint.Y);
                    aLayer.editCellValue("DATA", shapeNum, data[i]);
                }
            } catch (Exception ex) {
                Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //Add Label
        aLayer.getLabelSet().setFieldName("DATA");
        aLayer.getLabelSet().setLabelFont(new Font("Arial", Font.PLAIN, 18));
        aLayer.getLabelSet().setYOffset(30);
        aLayer.addLabels();

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().getMapView().paintLayers();
        layersLegend1.repaint();
    }//GEN-LAST:event_jMenuItem_CreatePointLayerActionPerformed

    private void jMenuItem_MICAPS13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_MICAPS13ActionPerformed
        // TODO add your handling code here:
        //Create a MeteoDataInfo object
        MeteoDataInfo aDataInfo = new MeteoDataInfo();

        //Open GrADS data file
        String dataDir = this.startupPath + "/data/meteo/";
        String fileName = dataDir + "Cloud_1007091000.000";
        aDataInfo.openMICAPSData(fileName);

        //Get GridData
        GridData cloud = aDataInfo.getGridData("var");

        //Create raster layer
        String palFile = dataDir + "I-01.pal";
        RasterLayer aLayer = DrawMeteoData.createRasterLayer(cloud, "Raster_Cloud", palFile);
        aLayer.setProjInfo(aDataInfo.getProjectionInfo());

        //Porject mapview
        layersLegend1.getActiveMapFrame().getMapView().projectLayers(aDataInfo.getProjectionInfo());

        //Add layer
        layersLegend1.getActiveMapFrame().addLayer(aLayer);
        layersLegend1.getActiveMapFrame().moveLayer(aLayer, 0);
        layersLegend1.repaint();
        layersLegend1.getActiveMapFrame().getMapView().zoomToExtent(aLayer.getExtent());

        //Change title of the layout
        LayoutGraphic aTitle = mapLayout1.getTexts().get(0);
        aTitle.setLabelText("MeteoInfo Class Library Demo - MICAPS 13 Layer");

        //Add or change the legend in layout
        LayoutLegend aLegend;
        if (mapLayout1.getLegends().size() > 0) {
            aLegend = mapLayout1.getLegends().get(0);
        } else {
            aLegend = mapLayout1.addLegend(650, 100);
        }
        aLegend.setLegendStyle(LegendStyles.BAR_VERTICAL);
        aLegend.setLegendLayer(aLayer);
        if (this.jTabbedPane1.getSelectedIndex() == 1) {
            mapLayout1.paintGraphics();
        }

    }//GEN-LAST:event_jMenuItem_MICAPS13ActionPerformed

    private void jMenuItem_TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_TestActionPerformed
        // TODO add your handling code here:
        String a = "中文";
        System.out.println(a);
        try {
            byte[] bytes;
            bytes = a.getBytes("ISO-8859-1");
            bytes = a.getBytes();
            String b = new String(bytes);
            System.out.println(b);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Encoding is not supported");
        }
        
    }//GEN-LAST:event_jMenuItem_TestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    try {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedLookAndFeelException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddLayer;
    private javax.swing.JButton jButton_FullExtent;
    private javax.swing.JButton jButton_Identifer;
    private javax.swing.JButton jButton_Pan;
    private javax.swing.JButton jButton_Select;
    private javax.swing.JButton jButton_ZoomIn;
    private javax.swing.JButton jButton_ZoomOut;
    private javax.swing.JLabel jLabel_Coordinate;
    private javax.swing.JLabel jLabel_Status;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Barb;
    private javax.swing.JMenuItem jMenuItem_Contour;
    private javax.swing.JMenuItem jMenuItem_CreatePointLayer;
    private javax.swing.JMenuItem jMenuItem_ExportFigure;
    private javax.swing.JMenuItem jMenuItem_GridFill;
    private javax.swing.JMenuItem jMenuItem_GridPoint;
    private javax.swing.JMenuItem jMenuItem_Lambert;
    private javax.swing.JMenuItem jMenuItem_LongLat;
    private javax.swing.JMenuItem jMenuItem_MICAPS13;
    private javax.swing.JMenuItem jMenuItem_MaskOut;
    private javax.swing.JMenuItem jMenuItem_Raster;
    private javax.swing.JMenuItem jMenuItem_Shaded;
    private javax.swing.JMenuItem jMenuItem_ShowLongLat;
    private javax.swing.JMenuItem jMenuItem_StationModel;
    private javax.swing.JMenuItem jMenuItem_StationPoint;
    private javax.swing.JMenuItem jMenuItem_StationShaded;
    private javax.swing.JMenuItem jMenuItem_StationVector;
    private javax.swing.JMenuItem jMenuItem_Streamline;
    private javax.swing.JMenuItem jMenuItem_Test;
    private javax.swing.JMenuItem jMenuItem_Vector;
    private javax.swing.JMenuItem jMenuItem_WeatherSymbol;
    private javax.swing.JMenu jMenu_GridData;
    private javax.swing.JMenu jMenu_MICAPSData;
    private javax.swing.JMenu jMenu_Map;
    private javax.swing.JMenu jMenu_MeteoData;
    private javax.swing.JMenu jMenu_Projection;
    private javax.swing.JMenu jMenu_StationData;
    private javax.swing.JPanel jPanel_Layout;
    private javax.swing.JPanel jPanel_Map;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private org.meteoinfo.geo.legend.LayersLegend layersLegend1;
    private org.meteoinfo.geo.layout.MapLayout mapLayout1;
    private org.meteoinfo.geo.mapview.MapView mapView1;
    // End of variables declaration//GEN-END:variables
}
